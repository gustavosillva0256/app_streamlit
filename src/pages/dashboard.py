"""
P√°gina do Dashboard Principal - Sistema de An√°lise Educacional - ES
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

def render_dashboard():
    st.markdown("## üè† Dashboard Principal - Sistema de An√°lise Educacional")
    st.markdown("---")
    
    # Carregar dados reais
    from services.data_service import DataService
    data_service = DataService()
    
    # Se√ß√£o de introdu√ß√£o e bases de dados
    st.markdown("""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 2rem; border-radius: 15px; margin-bottom: 2rem; color: white;">
        <h3 style="color: white; margin: 0 0 1rem 0;">üìö Sobre o Projeto</h3>
        <p style="font-size: 1.1rem; margin: 0 0 1rem 0; line-height: 1.6;">
            <strong>An√°lise de Dados Educacionais do Esp√≠rito Santo</strong><br>
            Monitoramento, an√°lise e visualiza√ß√£o de indicadores educacionais com dados oficiais do INEP.
        </p>
        <div style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 10px;">
            <h4 style="color: white; margin: 0 0 0.5rem 0;">üóÑÔ∏è Fonte dos Dados</h4>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; font-size: 0.9rem;">
                <div>
                    <strong>üèõÔ∏è INEP:</strong> Censo Escolar 2024 (Dados Oficiais)
                </div>
                <div>
                    <strong>üìä Microdados:</strong> Educa√ß√£o B√°sica + Cursos T√©cnicos
                </div>
                <div>
                    <strong>üìà Cobertura:</strong> 3.970 escolas, 78 munic√≠pios do ES
                </div>
                <div>
                    <strong>üîí Conformidade:</strong> LGPD - dados p√∫blicos agregados
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # üìä TABELA DESCRITIVA DA BASE DE DADOS (Requisito Etapa 3 - Item 1)
    st.markdown("### üìä An√°lise Descritiva da Base de Dados")
    st.markdown("**Estat√≠sticas descritivas dos dados educacionais do Esp√≠rito Santo - INEP 2024**")
    
    # Carregar dados reais para an√°lise
    escolas_df = data_service.get_data("escolas")
    municipios_df = data_service.get_data("municipios")
    
    if escolas_df is not None and municipios_df is not None:
        # Limpar dados - remover escolas com valores zero (provavelmente inativas)
        escolas_ativas = escolas_df[
            (escolas_df['TOTAL_PROFESSORES'] > 0) | 
            (escolas_df['TOTAL_MATRICULAS'] > 0) | 
            (escolas_df['TOTAL_TURMAS'] > 0)
        ].copy()
        
        st.info(f"üìä **Dados Limpos:** {len(escolas_ativas)} escolas ativas de {len(escolas_df)} total (removidas {len(escolas_df) - len(escolas_ativas)} escolas inativas)")
        
        # Criar DataFrame com dados das escolas ativas
        df_analise_escolas = pd.DataFrame({
            'Total_Professores': escolas_ativas['TOTAL_PROFESSORES'].values,
            'Total_Matriculas': escolas_ativas['TOTAL_MATRICULAS'].values,
            'Total_Turmas': escolas_ativas['TOTAL_TURMAS'].values
        })
        
        # Criar DataFrame separado com dados dos munic√≠pios
        df_analise_municipios = pd.DataFrame({
            'Escolas_por_Municipio': municipios_df['Total_Escolas'].values,
            'Professores_por_Municipio': municipios_df['Total_Professores'].values,
            'Matriculas_por_Municipio': municipios_df['Total_Matriculas'].values
        })
        
        # Calcular estat√≠sticas descritivas para escolas
        df_stats_escolas = df_analise_escolas.describe().round(2)
        
        # Renomear colunas para nomes mais descritivos
        df_stats_escolas.columns = [
            'üë®‚Äçüè´ Professores por Escola',
            'üë• Matr√≠culas por Escola', 
            'üè´ Turmas por Escola'
        ]
        
        # Renomear √≠ndice para portugu√™s
        df_stats_escolas.index = [
            'Contagem',
            'M√©dia',
            'Desvio Padr√£o',
            'Valor M√≠nimo',
            'Primeiro Quartil (25%)',
            'Mediana (50%)',
            'Terceiro Quartil (75%)',
            'Valor M√°ximo'
        ]
        
        # Formatar valores para melhor apresenta√ß√£o
        df_stats_escolas_formatted = df_stats_escolas.copy()
        
        # Aplicar formata√ß√£o espec√≠fica por coluna
        for col in df_stats_escolas_formatted.columns:
            # Formatar n√∫meros inteiros
            df_stats_escolas_formatted[col] = df_stats_escolas_formatted[col].apply(
                lambda x: f"{int(x):,}" if pd.notna(x) and x != 0 else f"{x:.2f}"
            )
        
        # Exibir tabela formatada das escolas
        st.markdown(f"**üìä Estat√≠sticas por Escola ({len(escolas_ativas):,} escolas ativas do ES)**")
        st.dataframe(df_stats_escolas_formatted, width='stretch')
        
        # Calcular estat√≠sticas descritivas para munic√≠pios
        df_stats_municipios = df_analise_municipios.describe().round(2)
        
        # Renomear colunas para nomes mais descritivos
        df_stats_municipios.columns = [
            'üè¢ Escolas por Munic√≠pio',
            'üë®‚Äçüè´ Professores por Munic√≠pio',
            'üë• Matr√≠culas por Munic√≠pio'
        ]
        
        # Renomear √≠ndice para portugu√™s
        df_stats_municipios.index = [
            'Contagem',
            'M√©dia',
            'Desvio Padr√£o',
            'Valor M√≠nimo',
            'Primeiro Quartil (25%)',
            'Mediana (50%)',
            'Terceiro Quartil (75%)',
            'Valor M√°ximo'
        ]
        
        # Formatar valores para melhor apresenta√ß√£o
        df_stats_municipios_formatted = df_stats_municipios.copy()
        
        # Aplicar formata√ß√£o espec√≠fica por coluna
        for col in df_stats_municipios_formatted.columns:
            # Formatar n√∫meros inteiros
            df_stats_municipios_formatted[col] = df_stats_municipios_formatted[col].apply(
                lambda x: f"{int(x):,}" if pd.notna(x) and x != 0 else f"{x:.2f}"
            )
        
        # Exibir tabela formatada dos munic√≠pios
        st.markdown("**üè¢ Estat√≠sticas por Munic√≠pio (78 munic√≠pios do ES)**")
        st.dataframe(df_stats_municipios_formatted, width='stretch')
        
        # Adicionar interpreta√ß√£o dos dados
        st.markdown("""
        <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin-top: 1rem;">
            <h4 style="color: #1f77b4; margin: 0 0 0.5rem 0;">üìã Interpreta√ß√£o dos Dados</h4>
            <ul style="margin: 0; padding-left: 1.5rem; color: #666;">
                <li><strong>Contagem:</strong> N√∫mero total de observa√ß√µes (escolas ativas ou munic√≠pios)</li>
                <li><strong>M√©dia:</strong> Valor m√©dio da vari√°vel analisada</li>
                <li><strong>Desvio Padr√£o:</strong> Medida de dispers√£o dos dados</li>
                <li><strong>Mediana:</strong> Valor que divide os dados ao meio (50%)</li>
                <li><strong>Quartis:</strong> Valores que dividem os dados em quartos (25%, 75%)</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        # Adicionar se√ß√£o sobre limpeza de dados
        st.markdown("""
        <div style="background: #e8f5e8; padding: 1rem; border-radius: 8px; margin-top: 1rem;">
            <h4 style="color: #28a745; margin: 0 0 0.5rem 0;">üßπ Limpeza de Dados Aplicada</h4>
            <ul style="margin: 0; padding-left: 1.5rem; color: #666;">
                <li><strong>Escolas Inativas Removidas:</strong> Escolas com zero professores, matr√≠culas e turmas</li>
                <li><strong>Dados V√°lidos:</strong> Apenas escolas com pelo menos uma atividade educacional</li>
                <li><strong>Qualidade:</strong> Estat√≠sticas mais representativas da realidade educacional</li>
                <li><strong>Fonte:</strong> Dados originais do INEP 2024 processados e validados</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        # Tabela adicional com dados anuais detalhados
        st.markdown("### üìà Dados Anuais Detalhados - Esp√≠rito Santo 2024")
        
        # Criar tabela com dados agregados por munic√≠pio (top 10)
        top_municipios = municipios_df.nlargest(10, 'Total_Professores').copy()
        
        # Formatar dados para apresenta√ß√£o
        df_detalhado = pd.DataFrame({
            'üè¢ Munic√≠pio': top_municipios['Municipio'],
            'üë®‚Äçüè´ Total de Professores': top_municipios['Total_Professores'].apply(lambda x: f"{int(x):,}"),
            'üë• Total de Matr√≠culas': top_municipios['Total_Matriculas'].apply(lambda x: f"{int(x):,}"),
            'üè´ Total de Turmas': top_municipios['Total_Turmas'].apply(lambda x: f"{int(x):,}"),
            'üè¢ N√∫mero de Escolas': top_municipios['Total_Escolas'].apply(lambda x: f"{int(x):,}"),
            'üìä Professores/Escola': (top_municipios['Total_Professores'] / top_municipios['Total_Escolas']).round(1)
        })
        
        st.dataframe(df_detalhado, width='stretch', hide_index=True)
        
        st.markdown("*Top 10 munic√≠pios do Esp√≠rito Santo por n√∫mero de professores - Dados INEP 2024*")
        
    else:
        st.info("Carregando dados para an√°lise descritiva...")
    
    st.markdown("---")
    
    # Usar dados j√° carregados acima
    if escolas_df is not None and municipios_df is not None:
        # Calcular m√©tricas reais
        total_professores = int(escolas_df['TOTAL_PROFESSORES'].sum())
        total_escolas = len(escolas_df)
        total_municipios = len(municipios_df)
        total_matriculas = int(escolas_df['TOTAL_MATRICULAS'].sum())
        
        # M√©tricas principais
        st.markdown("### üìä M√©tricas Principais - Dados Reais 2024")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="Total de Professores",
                value=f"{total_professores:,}",
                delta="Dados INEP 2024",
                delta_color="normal"
            )
        
        with col2:
            st.metric(
                label="Total de Escolas",
                value=f"{total_escolas:,}",
                delta="Esp√≠rito Santo",
                delta_color="normal"
            )
        
        with col3:
            st.metric(
                label="Total de Matr√≠culas",
                value=f"{total_matriculas:,}",
                delta="Educa√ß√£o B√°sica",
                delta_color="normal"
            )
        
        with col4:
            st.metric(
                label="Munic√≠pios Atendidos",
                value=f"{total_municipios}",
                delta="100% do ES",
                delta_color="normal"
            )
    else:
        # Fallback para dados simulados
        st.markdown("### üìä M√©tricas Principais")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="Total de Professores (2025)",
                value="53.200",
                delta="+1.400",
                delta_color="normal"
            )
        
        with col2:
            st.metric(
                label="Forma√ß√µes Realizadas",
                value="2.120",
                delta="+120",
                delta_color="normal"
            )
        
        with col3:
            st.metric(
                label="Taxa de Crescimento",
                value="2.7%",
                delta="+0.3%",
                delta_color="normal"
            )
        
        with col4:
            st.metric(
                label="Munic√≠pios Atendidos",
                value="78",
                delta="0",
                delta_color="off"
            )
    
    st.markdown("---")
    
    # üìà GR√ÅFICOS (Requisito Etapa 3 - Item 2: Gr√°ficos √† escolha)
    st.markdown("### üìà Visualiza√ß√µes de Dados")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä Distribui√ß√£o por Depend√™ncia")
        
        if escolas_df is not None:
            # Dados reais por depend√™ncia
            dependencia_df = data_service.get_data("dependencia")
            
            if dependencia_df is not None:
                fig = px.bar(
                    dependencia_df,
                    x='Dependencia',
                    y='Total_Professores',
                    title="Professores por Depend√™ncia Administrativa",
                    color='Total_Professores',
                    color_continuous_scale='Blues',
                    labels={'Total_Professores': 'N√∫mero de Professores', 'Dependencia': 'Depend√™ncia'}
                )
                fig.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig, width='stretch')
            else:
                st.info("Dados de depend√™ncia n√£o dispon√≠veis")
        else:
            st.info("Carregando dados...")
    
    with col2:
        st.markdown("#### ü•ß Distribui√ß√£o por Localiza√ß√£o")
        
        if escolas_df is not None:
            # Dados reais por localiza√ß√£o
            localizacao_df = data_service.get_data("localizacao")
            
            if localizacao_df is not None:
                fig = px.pie(
                    localizacao_df,
                    values='Total_Professores',
                    names='Localizacao',
                    title="Distribui√ß√£o de Professores por Localiza√ß√£o",
                    color_discrete_sequence=px.colors.qualitative.Set3
                )
                fig.update_layout(height=400)
                st.plotly_chart(fig, width='stretch')
            else:
                st.info("Dados de localiza√ß√£o n√£o dispon√≠veis")
        else:
            st.info("Carregando dados...")
    
    #     st.markdown("---")
    
    # Gr√°fico de barras para dados por munic√≠pio
    st.markdown("### üìç Top 10 Munic√≠pios por N√∫mero de Professores")
    
    if municipios_df is not None:
        # Pegar top 10 munic√≠pios
        top_municipios = municipios_df.nlargest(10, 'Total_Professores')
        
        fig = px.bar(
            top_municipios,
            x='Total_Professores',
            y='Municipio',
            orientation='h',
            title="Top 10 Munic√≠pios por N√∫mero de Professores",
            color='Total_Professores',
            color_continuous_scale='Viridis',
            labels={'Total_Professores': 'N√∫mero de Professores', 'Municipio': 'Munic√≠pio'}
        )
        fig.update_layout(height=500, showlegend=False)
        st.plotly_chart(fig, width='stretch')
    else:
        st.info("Dados de munic√≠pios n√£o dispon√≠veis")
    
    #     st.markdown("---")
    
    # Indicadores de qualidade
    st.markdown("### üéØ Indicadores de Qualidade - Dados Reais 2024")
    
    if escolas_df is not None:
        # Calcular indicadores reais
        total_escolas = len(escolas_df)
        escolas_urbanas = len(escolas_df[escolas_df['TP_LOCALIZACAO'] == 1])
        escolas_rurais = len(escolas_df[escolas_df['TP_LOCALIZACAO'] == 2])
        percentual_urbano = (escolas_urbanas / total_escolas) * 100
        
        # Calcular m√©dia de professores por escola
        media_prof_escola = escolas_df['TOTAL_PROFESSORES'].mean()
        
        # Calcular m√©dia de matr√≠culas por escola
        media_mat_escola = escolas_df['TOTAL_MATRICULAS'].mean()
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div style="text-align: center; padding: 1rem; background: #e8f5e8; border-radius: 10px;">
                <h4 style="color: #28a745; margin: 0;">üèôÔ∏è Escolas Urbanas</h4>
                <h2 style="color: #28a745; margin: 0.5rem 0;">{percentual_urbano:.1f}%</h2>
                <p style="margin: 0; color: #666;">{escolas_urbanas:,} de {total_escolas:,} escolas</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div style="text-align: center; padding: 1rem; background: #fff3cd; border-radius: 10px;">
                <h4 style="color: #856404; margin: 0;">üë®‚Äçüè´ M√©dia Prof/Escola</h4>
                <h2 style="color: #856404; margin: 0.5rem 0;">{media_prof_escola:.1f}</h2>
                <p style="margin: 0; color: #666;">Professores por escola</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div style="text-align: center; padding: 1rem; background: #d1ecf1; border-radius: 10px;">
                <h4 style="color: #0c5460; margin: 0;">üìö M√©dia Mat/Escola</h4>
                <h2 style="color: #0c5460; margin: 0.5rem 0;">{media_mat_escola:.0f}</h2>
                <p style="margin: 0; color: #666;">Matr√≠culas por escola</p>
            </div>
            """, unsafe_allow_html=True)
    else:
        # Fallback para indicadores simulados
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            <div style="text-align: center; padding: 1rem; background: #e8f5e8; border-radius: 10px;">
                <h4 style="color: #28a745; margin: 0;">üìö Taxa de Conclus√£o</h4>
                <h2 style="color: #28a745; margin: 0.5rem 0;">89.5%</h2>
                <p style="margin: 0; color: #666;">Meta: 90%</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div style="text-align: center; padding: 1rem; background: #fff3cd; border-radius: 10px;">
                <h4 style="color: #856404; margin: 0;">‚≠ê Satisfa√ß√£o</h4>
                <h2 style="color: #856404; margin: 0.5rem 0;">4.2/5.0</h2>
                <p style="margin: 0; color: #666;">Meta: 4.0/5.0</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div style="text-align: center; padding: 1rem; background: #d1ecf1; border-radius: 10px;">
                <h4 style="color: #0c5460; margin: 0;">üéØ Aplicabilidade</h4>
                <h2 style="color: #0c5460; margin: 0.5rem 0;">87.3%</h2>
                <p style="margin: 0; color: #666;">Meta: 85%</p>
            </div>
            """, unsafe_allow_html=True)
    
    # st.markdown("---")
    
    # Se√ß√£o de pr√≥ximos passos
    st.markdown("### üöÄ Pr√≥ximos Passos do Projeto")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **üîÑ Em Desenvolvimento:**
        - Atualiza√ß√£o autom√°tica com novos dados do INEP
        - Pipeline de processamento otimizado
        - Valida√ß√£o de qualidade dos microdados
        - An√°lises comparativas hist√≥ricas
        """)
    
    with col2:
        st.markdown("""
        **üöÄ Futuras Expans√µes:**
        - An√°lise preditiva com dados do INEP
        - Indicadores de qualidade educacional
        - Mapas interativos por munic√≠pio
        - Relat√≥rios personalizados por regi√£o
        """)
    
    # Informa√ß√µes t√©cnicas sobre as bases de dados
    st.markdown("---")
    st.markdown("### üìã Fonte dos Dados - INEP 2024")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        **üèõÔ∏è Instituto Nacional de Estudos e Pesquisas Educacionais (INEP)**
        
        üìä **Censo Escolar 2024**
        - Dados oficiais sobre escolas do Esp√≠rito Santo
        - Informa√ß√µes sobre professores, matr√≠culas e turmas
        - Dados demogr√°ficos e geogr√°ficos por munic√≠pio
        - Frequ√™ncia: Anual (dados mais recentes)
        
        üìà **Microdados da Educa√ß√£o B√°sica**
        - Dados detalhados de 3.970 escolas do ES
        - Informa√ß√µes por depend√™ncia administrativa
        - Classifica√ß√£o urbana/rural
        - Dados de infraestrutura e recursos
        
        üìã **Suplemento de Cursos T√©cnicos**
        - Dados de 584 cursos t√©cnicos no ES
        - Informa√ß√µes sobre matr√≠culas e ofertas
        - Dados por munic√≠pio e √°rea de conhecimento
        - Frequ√™ncia: Anual
        """)
    
    with col2:
        st.markdown("""
        **üîó Acesso aos Dados:**
        - Portal de dados abertos do INEP
        - Microdados dispon√≠veis publicamente
        - APIs oficiais do governo
        
        **üìÅ Formatos:**
        - CSV (separado por ponto e v√≠rgula)
        - Codifica√ß√£o: Latin-1
        - Dados processados e filtrados
        
        **üìÖ Atualiza√ß√£o:**
        - Dados de 2024 (mais recentes)
        - Processamento em tempo real
        - Filtros aplicados para ES
        """)
    
    # Estat√≠sticas dos dados carregados
    if 'municipios' in st.session_state.get('data_cache', {}):
        municipios_df = st.session_state['data_cache']['municipios']
        st.markdown("**üìä Estat√≠sticas dos Dados Carregados:**")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Munic√≠pios", len(municipios_df))
        with col2:
            st.metric("Escolas", "3.970")
        with col3:
            st.metric("Cursos T√©cnicos", "584")
    
    st.markdown("---")
    st.markdown("""
    <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; text-align: center;">
        <p style="margin: 0; color: #666;">
            <strong>üìö Sistema de An√°lise Educacional - ES</strong><br>
            Projeto acad√™mico desenvolvido por Gustavo Pereira para an√°lise de dados educacionais do Brasil
        </p>
    </div>
    """, unsafe_allow_html=True)
